View(exam_end4)
#Analyzing by license type only
exam_end_combined <- state_averages_combined %>%
filter (year %in% c("2021")) %>%
select (-year) %>%
mutate (mean = as.integer(mean),
median= as.integer(median))
min_lic_type2 <- state_averages_combined %>%
filter (year=="2021") %>%
mutate (mean = as.integer(mean),
median= as.integer(median)) %>%
group_by (lic_type) %>%
summarize (across(3:18, ~min(.x))) %>%
add_column(data_state="state_min") %>%
select (-year)
max_lic_type2 <- state_averages_combined %>%
filter (year=="2021") %>%
mutate (mean = as.integer(mean),
median= as.integer(median)) %>%
group_by (lic_type) %>%
summarize (across(3:18, ~max(.x))) %>%
add_column (data_state="state_max") %>%
select (-year)
natl_averages5 <- natl_averages_combined %>%
filter (year=="2021") %>%
mutate (mean = as.integer(mean),
median= as.integer(median)) %>%
add_column(data_state="natl_look") %>%
select (-year)
exam_end_combined2 <- exam_end_combined %>%
rbind (natl_averages5, min_lic_type2, max_lic_type2) %>%
arrange (data_state) %>%
mutate (standard_app_type = "All new licenses (Endorsement, exam, other, unknown)",
lic_type = "All (LPN+RN)")  %>%
select (1:6) %>%
pivot_longer (cols = c("mean", "median", "count"),
names_to = "type",
values_to = "value") %>%
pivot_wider (id_cols = c("type","lic_type", "standard_app_type"),
names_from = "data_state",
values_from = "value") %>%
select (1:3, natl_look, state_min, state_max, 4:19, 21:30, 33:39)
for_connie <- rbind (exam_end_combined2, exam_end_lic_only2, exam_end4) %>%
arrange (lic_type, standard_app_type) %>%
rename (app_type = standard_app_type)
write_csv (for_connie, "../output/2021_state_summary.csv")
#Convert back to tidy version
for_connie2 <- for_connie %>%
pivot_longer (cols = 4:38,
names_to = "state",
values_to = "value") %>%
pivot_wider (id_cols = c("lic_type", "app_type", "state"),
values_from = "value",
names_from = "type")
write_csv (for_connie2, "../output/2021_state_summary_tidy.csv")
View(for_connie)
weeks_to_license <- valid_data3 %>%
# group_by (year, data_state, lic_type, standard_app_type) %>%
#  mutate (median21 = median (process_time2)) %>%
mutate (#week_count = round(as.numeric(process_time2/7)), #will round down if below 0.5
week_count = ceiling(as.numeric(process_time2/7))) %>% #always round up
#  rename (week_count = process_time2) %>%
filter (year=="2021") %>%
count (data_state, lic_type, standard_app_type, week_count) #, median21
#  rename (licensee_count = n)
#Check that week_count captures weeks accurately
valid_data3 %>%
mutate (week_count = ceiling(as.numeric(process_time2/7))) %>%
group_by (week_count) %>%
summarize (min (process_time2),
max(process_time2))
valid_data4 <- valid_data3 %>%
filter (year == "2021") %>%
group_by (year, data_state, lic_type, standard_app_type) %>%
summarize (median21 = median (process_time2),
count = n()) %>%
group_by (year, data_state, lic_type, standard_app_type) %>%
mutate (pct = count / sum(count) * 100,
#med_weeks = ceiling (as.numeric(median21/7))
med_weeks = (as.numeric(median21/7)))
#EXPORT FOR NPR graphics team ========================= |
connie_histographs <- weeks_to_license %>%
rename (licensee_count = n) %>%
pivot_wider (id_cols = c(lic_type, standard_app_type, week_count),
names_from = data_state,
values_from = licensee_count)
#write_csv (connie_histographs, "Nurse licenses-weeks to licensure.csv")
#write_csv (weeks_to_license, "Nurse licenses-weeks to licensure-tidy.csv")
#write_csv (valid_data4, "Nurse licenses-weeks to licensure-state medians.csv")
#Separating for Connie into CA, PA, TX
pa_weeks_to_license <- weeks_to_license %>%
rename (licensee_count = n) %>%
filter (data_state == "PA" & standard_app_type %in% c("Exam", "Endorsement")) #%>%
#  pivot_wider (id_cols = week_count,
#               names_from = c(lic_type, standard_app_type),
#               values_from = licensee_count) %>%
#  arrange (week_count) %>%
#  mutate (across(2:5, ~replace_na(.x, 0)))
#write_csv (tx, "Nurse licenses-weeks to licensure-TX.csv")
pa_weeks_to_license2 <- valid_data3 %>% #FOR JAN-SEPT
ungroup() %>%
filter (data_state=="PA" & year == "2021") %>%
group_by (year, data_state, lic_type, standard_app_type) %>%
summarize (mean21 = mean (process_time2),
median21 = median (process_time2),
count = n()) %>%
group_by (year, data_state, lic_type, standard_app_type) %>%
mutate (med_weeks =  ceiling(as.numeric(median21/7)),#ceiling
mean_weeks =  ceiling(as.numeric(mean21/7))) %>% #ceiling
filter (lic_type %in% c("RN", "LPN"))
#write_csv (pa_weeks_to_license2, "pa_averages_220307.csv")
pa_graph <- pa_weeks_to_license %>%
#filter (data_state==state) %>%
#filter (lic_type %in% c("RN")) %>% #"LPN",
filter (standard_app_type %in% c("Exam", "Endorsement")) %>%
arrange (standard_app_type, week_count) %>%
#  filter (standard_app_type == "Exam") %>%
# filter (!(standard_app_type %in% c("Reinstatement", "Renewal", "Exam-retest"))) %>%
ggplot(aes(x = week_count, y = licensee_count, group=lic_type, fill=standard_app_type)) +
geom_bar(stat='identity', position='stack') +
facet_wrap (~ lic_type, ncol=1, scales='free',
labeller = label_wrap_gen(multi_line=FALSE)) +
# scale_x_continuous(breaks=c(0,30, 60, 90, 120)) +
scale_x_continuous(
breaks=seq(0, 52, by = 4), #(365 / 7 / 12))
#                   labels=as.character(seq(0, 12, by = 1)),
limits=c(-0.5, 52)) +
#Add padding so they appear equal width
scale_y_continuous(breaks=seq(0,850, by = 200),#900 Jan-sept #1500 fullyear
limits=c(0,850)
#labels = function(x) stringr::str_pad(x, width = 4, pad = "0")
) +
#Add median lines
geom_vline(data = (pa_weeks_to_license2 %>% filter (lic_type=="RN" & standard_app_type %in% c("Exam", "Endorsement"))), mapping = aes(xintercept = med_weeks)) +
# geom_vline(data = (ca_weeks_to_license5 %>% filter (lic_type=="RN" & standard_app_type %in% c("Exam", "Endorsement"))), mapping = aes(xintercept = mean_weeks), color="steelblue", linetype="twodash") +
# geom_vline (xintercept = 90, linetype = "dashed", colour = "black") +
labs(x="Weeks from application to licensure",
y="Count of licensees",
title=paste("New registered nurse licenses issued in PA in 2021"),
fill = "Application Type",
#subtitle="Weeks from application submission to license issuance",
caption="Source: Pennsylvania State Board of Nursing\nVertical lines represent that group's median processing time.") +#\nIncludes licenses issued Jan. 1 to Sept. 23, 2021.") +
theme(axis.text.x = element_text(angle=60, hjust=1)) +
theme(legend.position = "right")
print(pa_graph)
#Save states to list
states=(ls() %>% as.data.frame() %>% filter (str_detect(., "_state$")) %>% pull() %>% str_remove_all("_state") %>% str_to_upper())
#states <- str_to_upper(c("ar", "co", "hi", "ia", "il", "in", "ky", "ma", "me", "mi", "mn", "ms", "mt", "ne", "nh", "nj", "nm", "oh", "ok", "or", "pa", "sc", "tx", "vt", "LA", "WY", "WV", "CT", "VA", "NC", "CA", "TN"))
for (i in states){
state <- i
#CT/VA don't separate by exam/endorsement, so change here
if (state %in% c("CT", "VA")){
rn_med <- valid_data4 %>%
filter (data_state==state & lic_type=="RN" & standard_app_type=="Unknown") %>%
mutate (median21 = as.numeric(median21) / 7) %>%
pull (median21)
lpn_med <- valid_data4 %>%
filter (data_state==state & lic_type=="LPN" & standard_app_type=="Unknown") %>%
mutate (median21 = as.numeric(median21) / 7) %>%
pull (median21)
#Make RN graph
rn_graph <- weeks_to_license %>%
filter (data_state==state) %>%
filter (lic_type %in% c("RN")) %>% #"LPN",
#mutate (standard_app_type = "Exam & Endorsement") %>%
ggplot(aes(x = week_count, y = n, group=lic_type, fill=lic_type)) +
geom_bar(stat='identity')  +
facet_wrap (~ standard_app_type, ncol=1) +
scale_x_continuous(#breaks=seq(0, 53, by = 4.285714),
breaks=seq(0, 52, by = 4),
#labels=as.character(seq(0, 12, by = 1)),
limits=c(-1, 53)) +
#Add padding so they appear equal width
scale_y_continuous(labels = function(x) stringr::str_pad(x, width = 4, pad = "0")) +
#Add RN median
geom_vline(data = subset(weeks_to_license, standard_app_type == "Unknown"), aes(xintercept = rn_med)) +
labs(x="Weeks from application to licensure",
y="Count of applicants",
title=paste(state, "registered nurse licenses issued in 2021"),
fill = "Type",
#subtitle="Weeks from application submission to license issuance",
caption="Source: State board of nursing") +
theme(axis.text.x = element_text(angle=60, hjust=1)) +
theme(legend.position = "none")
print(rn_graph)
#SAVE TO FILE WITH THIS CODE
#ggsave(plot = rn_graph,
#       file = paste0("/Users/austinfast/Documents/NPR/210908-nursing licenses/Graphs/", state, "-RN.png"),
#width = 6,
#height = 3
#       )
lpn_graph <- weeks_to_license %>%
filter (data_state==state) %>%
filter (lic_type %in% c("LPN")) %>% #"LPN",
#mutate (standard_app_type = "Exam & Endorsement") %>%
#  filter (standard_app_type == "Exam") %>%
# filter (!(standard_app_type %in% c("Reinstatement", "Renewal", "Exam-retest"))) %>%
ggplot(aes(x = week_count, y = n, group=lic_type, fill=lic_type)) +
geom_bar(stat='identity', color = "skyblue", fill ="skyblue")  +
facet_wrap (~ standard_app_type, ncol=1) +
scale_x_continuous(#breaks=seq(0, 53, by = 4.285714),
breaks=seq(0, 52, by = 4),
#labels=as.character(seq(0, 12, by = 1)),
limits=c(-1, 53)) +
#Add padding so they appear equal width
scale_y_continuous(labels = function(x) stringr::str_pad(x, width = 4, pad = "0")) +
#ADD ALL MEDIANS TO ALL FACETS HERE
geom_vline(data = subset(weeks_to_license, standard_app_type == "Unknown"), aes(xintercept = lpn_med)) +
# geom_vline (xintercept = 90, linetype = "dashed", colour = "black") +
labs(x="Weeks from application to licensure",
y="Count of applicants",
title=paste(state, "practical nurse licenses issued in 2021"),
fill = "Type",
#subtitle="Weeks from application submission to license issuance",
caption="Source: State board of nursing") +
theme(axis.text.x = element_text(angle=60, hjust=1)) +
theme(legend.position = "none")
print (lpn_graph)
#SAVE TO FILE WITH THIS CODE
#ggsave(plot = lpn_graph,
#       file = paste0("/Users/austinfast/Documents/NPR/210908-nursing licenses/Graphs/", state, "-LPN.png")
#       )
} else {
#Lousiana only has LPNs, so skip RN graph
if(state=="LA"){
}else{
rn_graph <- weeks_to_license %>%
filter (data_state==state) %>%
filter (lic_type %in% c("RN")) %>% #"LPN",
filter (standard_app_type %in% c("Exam", "Endorsement")) %>%
#  filter (standard_app_type == "Exam") %>%
# filter (!(standard_app_type %in% c("Reinstatement", "Renewal", "Exam-retest"))) %>%
ggplot(aes(x = week_count, y = n, group=lic_type, fill=lic_type)) +
geom_bar(stat='identity')  +
facet_wrap (~ standard_app_type, ncol=1) +
scale_x_continuous(#breaks=seq(0, 53, by = 4.285714),
breaks=seq(0, 52, by = 4),
#labels=as.character(seq(0, 12, by = 1)),
limits=c(-1, 53)) + #140 to reach max
#Add padding so they appear equal width
scale_y_continuous(labels = function(x) stringr::str_pad(x, width = 4, pad = "0"),
#limits=c(0, 800)
) +
#ADD ALL MEDIANS TO ALL FACETS HERE
geom_vline(data = (valid_data4 %>% filter (data_state == state & lic_type=="RN" & standard_app_type %in% c("Exam", "Endorsement"))), mapping = aes(xintercept = med_weeks)) +
labs(x="Weeks from application to licensure",
y="Count of applicants",
title=paste(state, "registered nurse licenses issued in 2021"),
fill = "Type",
#subtitle="Weeks from application submission to license issuance",
caption="Source: State board of nursing") +
theme(axis.text.x = element_text(angle=60, hjust=1)) +
theme(legend.position = "none")
print(rn_graph)
#SAVE TO FILE WITH THIS CODE
#ggsave(plot = rn_graph,
#       file = paste0("/Users/austinfast/Documents/NPR/210908-nursing licenses/Graphs/", state, "-RN.png"),
#width = 6,
#height = 3
#       )
}
#WY/WV only have RNs, so skip RN graph
if (state %in% c("WY", "WV")){
}else{
lpn_graph <- weeks_to_license %>%
filter (data_state==state) %>%
filter (lic_type %in% c("LPN")) %>% #"LPN",
filter (standard_app_type %in% c("Exam", "Endorsement")) %>%
#  filter (standard_app_type == "Exam") %>%
# filter (!(standard_app_type %in% c("Reinstatement", "Renewal", "Exam-retest"))) %>%
ggplot(aes(x = week_count, y = n, group=lic_type, fill=lic_type)) +
geom_bar(stat='identity', color = "skyblue", fill ="skyblue")  +
facet_wrap (~ standard_app_type, ncol=1) +
scale_x_continuous(#breaks=seq(0, 53, by = 4.285714),
breaks=seq(0, 52, by = 4),
#labels=as.character(seq(0, 12, by = 1)),
limits=c(-1, 53)) +
#Add padding so they appear equal width
scale_y_continuous(labels = function(x) stringr::str_pad(x, width = 4, pad = "0")) +
#ADD ALL MEDIANS TO ALL FACETS HERE
geom_vline(data = (valid_data4 %>% filter (data_state == state & lic_type=="LPN" & standard_app_type %in% c("Exam", "Endorsement"))), mapping = aes(xintercept = med_weeks)) +
# geom_vline (xintercept = 90, linetype = "dashed", colour = "black") +
labs(x="Weeks from application to licensure",
y="Count of applicants",
title=paste(state, "practical nurse licenses issued in 2021"),
fill = "Type",
#subtitle="Weeks from application submission to license issuance",
caption="Source: State board of nursing") +
theme(axis.text.x = element_text(angle=60, hjust=1)) +
theme(legend.position = "none")
print (lpn_graph)
#SAVE TO FILE WITH THIS CODE
#ggsave(plot = lpn_graph,
#       file = paste0("/Users/austinfast/Documents/NPR/210908-nursing licenses/Graphs/", state, "-LPN.png"),
#width = 6,
#height = 3
#       )
}
}
}
nnd <- read_excel ("../state-data/NCSBN-Aggregate-AllActiveLicensesExcel-112321.xls", skip=3) %>%
select(1,4,7) %>%
magrittr::set_colnames(c("state_name", "licenses", "pct")) %>%
filter (!(state_name=="TOTALS"|is.na(state_name)))
fips <- fips_codes %>%
distinct (state, state_name) %>%
mutate (state_name = str_to_upper(state_name),
state = str_to_lower(state))
nnd2 <- nnd %>%
left_join (fips, by = "state_name") %>%
mutate (state = case_when (
state_name=="CALIFORNIA-RN" ~ "ca-rn",
state_name=="CALIFORNIA-VN" ~ "ca-pn",
state_name=="LOUISIANA-RN" ~ "la-rn",
state_name=="LOUISIANA-PN" ~ "la-pn",
state_name=="WEST VIRGINIA-RN" ~ "wv-rn",
state_name=="WEST VIRGINIA-PN" ~ "wv-pn",
TRUE ~ str_to_lower(state))) %>%
add_row (state_name="MICHIGAN", licenses=177633, state="mi") #Michigan not included in NCSBN dataset, so adding figure from 2020 report: https://www.michigan.gov/documents/mdhhs/MI_Nurse_Survey_Report_2020_final_705633_7.pdf
#Create list of _state dataframes found in R environment to mark as data received
save_these=(ls() %>%
as.data.frame() %>%
filter (str_detect(., "_state$")) %>%
magrittr::set_colnames("name") %>%
add_row(name="ca-rn") %>% #manually set those states with multiple boards
add_row(name="ca-pn") %>%
add_row(name="wv-rn") %>%
add_row(name="la-pn") %>%
pull() %>%
str_remove_all("_state"))
nnd3 <- nnd2 %>%
mutate (data = if_else (state %in% save_these, "received", "missing"), #, "fl",
pct = licenses / sum(licenses) * 100)
nnd3 %>%
group_by (data) %>%
summarize (count = sum(licenses),
pct = sum (pct))
View(for_connie2)
nrow(all_data2 %>% filter (process_time2 < 0) %>%
filter ((str_detect(app_type, "^Renewal")|str_detect(app_type, "^Reinstatement")))) / nrow(all_data2)
all_data2 %>%
filter (process_time2 < 0) %>%
#count (lic_type, app_type) %>%
filter (!(str_detect(app_type, "^Renewal")|str_detect(app_type, "^Reinstatement"))) #%>%
#arrange (desc(n))
all_data2 %>%
filter (process_time2 < 0) #%>%
all_data2 %>%
filter (process_time2 < 0) %>%
#count (lic_type, app_type) %>%
filter (!(str_detect(app_type, "^Renewal")|str_detect(app_type, "^Reinstatement"))) #%>%
all_data2 %>%
filter (process_time2 < 0) %>%
#count (lic_type, app_type) %>%
filter ((str_detect(app_type, "^Renewal")|str_detect(app_type, "^Reinstatement"))) #%>%
555127/565770
nrow(all_data2 %>% filter (process_time2 < 0) %>%
filter (!(str_detect(app_type, "^Renewal")|str_detect(app_type, "^Reinstatement")))) / nrow(all_data2)
all_data2 %>%
filter (is.na(process_time2)) %>%
#count (data_state)
count (lic_type, app_type) %>%
arrange (desc(n))
nrow(all_data2 %>% filter (is.na(process_time2))) / nrow(all_data2)
all_data2 %>%
filter (is.na(process_time2)) %>%
#count (data_state)
count (lic_type, app_type) %>%
arrange (desc(n)) %>%
adorn_totals()
all_data2 %>%
filter (process_time2 > -1) %>%
filter (year != "2022") %>% #remove 266 errors
filter (!(str_detect(year, "^Pending"))) #%>% #remove all pending apps
all_data2 %>%
filter (process_time2 > -1) %>%
filter (year != "2022") %>% #remove 266 errors
#filter (!(str_detect(year, "^Pending"))) #%>% #remove all pending apps
filter (!(str_detect(year, "^Pending") & (application_date < as.Date("2020-07-01")))) #%>% #remove pending apps older than July 2020 (11789 RNs & 1994 LPNs) %>%
all_data2 %>%
filter (process_time2 > -1) %>%
filter (year != "2022") %>% #remove 266 errors
filter (!(str_detect(year, "^Pending"))) #%>% #remove all pending apps
#2,032,084 records for Jan. 1, 2019 - Sept. 23, 2021
filtered_data <- all_data2 %>%
filter (application_date <= as.Date("2021-09-23")) %>%
filter (issue_date <= as.Date("2021-09-23")) %>%
#Standardize 29 app types to simplest version
mutate (standard_app_type = case_when(
str_detect(app_type, "Reinstatement") ~ "Reinstatement",
str_detect(app_type, "Renewal") ~ "Renewal",
str_detect(lic_type, "Provisional") ~ "Temporary",
str_detect(lic_type, "Temp") ~ "Temporary",
lic_type=="Volunteer RN" ~ "Temporary", #for 22 records in PA
str_detect(app_type, "Endorsement") ~ "Endorsement",
str_detect(app_type, "Exam-retest") ~ "Exam-retest",
str_detect(app_type, "Exam") ~ "Exam",
app_type %in% c("Foreign Applicant", "Inactive", "SSL to MSL", "International", "Military Vet Expedited Initial Licensure") ~ "Other",
TRUE ~ app_type))
#How many processing times are negative and will be removed?
#553214 records
filtered_data %>% filter (process_time2 < 0) %>% nrow()
#Where are these from and what types of applications?
#Majority are renewals (525793);
#3125 are Endorsement
#2793 are Exam
filtered_data %>% filter (process_time2 < 0) %>% count(standard_app_type) %>%
adorn_totals("row")
#Four application types NPR is analyzing = 226,304 new licenses issued in 2021
filtered_data %>%
filter (year=="2021" & standard_app_type %in% c("Exam", "Endorsement", "Other", "Unknown")) %>%
count(standard_app_type) %>%
adorn_totals("row")
#How many of these had negative process times that were removed from 2021's data?
#Just 77 licenses from six states
filtered_data %>%
filter (year=="2021" & standard_app_type %in% c("Exam", "Endorsement", "Other", "Unknown") & process_time2 < 0) %>%
count(standard_app_type, data_state) %>%
adorn_totals("row")
#How many processing times are NA and will be removed?
#NONE
filtered_data %>%
filter (is.na(process_time2)) %>%
nrow()
#Original method to filter down dataset, keeps pending applications
valid_data <- all_data2 %>%
filter (process_time2 > -1) %>% #Keep only valid processing times
filter (!is.na(process_time2)) %>%
filter (year != "2022") %>% #remove 266 errors and those issued in NC/TN
#remove pending apps older than July 2020 (11789 RNs & 1994 LPNs)
filter (!(str_detect(year, "^Pending") & (application_date < as.Date("2020-12-31")))) #"2020-07-01"
#639,067 records removed (NA + negative)
nrow(all_data2)-nrow(valid_data)
#Standardize 30+ app types to simplest version - 8 types
valid_data2 <- valid_data %>%
mutate (standard_app_type = case_when(
str_detect(app_type, "Reinstatement") ~ "Reinstatement",
str_detect(app_type, "Renewal") ~ "Renewal",
str_detect(lic_type, "Provisional") ~ "Temporary",
str_detect(lic_type, "Temp") ~ "Temporary",
lic_type=="Volunteer RN" ~ "Temporary", #for 22 records in PA
str_detect(app_type, "Endorsement") ~ "Endorsement",
str_detect(app_type, "Exam-retest") ~ "Exam-retest",
str_detect(app_type, "Exam") ~ "Exam",
app_type %in% c("Foreign Applicant", "Inactive", "SSL to MSL", "International", "Military Vet Expedited Initial Licensure") ~ "Other",
TRUE ~ app_type))
valid_data21 <- valid_data3 %>%
filter (!(year %in% c("2019", "2020"))) %>%
arrange (data_state, lic_type, app_type, desc(process_time2)) %>%
select (1:3, standard_app_type, 4:44)
valid_data21_issued <- valid_data21 %>%
filter (year=="2021")
valid_data21_pending <- valid_data21 %>%
filter (str_detect(year, "^Pending"))
avg_counts <- state_averages %>%
ungroup() %>%
filter (year=="2021") %>%
group_by (lic_type, standard_app_type) %>%
summarize (count = sum(count))
avg_counts %>%
ungroup() %>%
filter (lic_type %in% c("RN", "LPN") & standard_app_type %in% c("Endorsement", "Exam", "Other", "Unknown")) %>%
summarize (total = sum(count))
valid_data3 %>%
ungroup() %>%
filter (year=="2021") %>%
filter (lic_type %in% c("RN", "LPN") & standard_app_type %in% c("Endorsement", "Exam", "Other", "Unknown")) %>%
summarize (total = n())
View(natl_comparison2)
View(natl_comparison)
compare_count2 <- natl_averages %>%
filter (lic_type %in% c("LPN", "RN")) %>%
filter (year %in% c("2020", "2021", "Pending")) %>%
#filter (!(standard_app_type %in% c("Reinstatement", "Renewal", "Exam-retest"))) %>%
group_by (lic_type, standard_app_type, year) %>%
summarize (count = sum(count),
across(c(count_over30days, count_over60days, count_over90days, count_over120days, count_over180days, count_over1year), ~(sum(.x))))
compare_pct2 <- natl_averages %>%
filter (lic_type %in% c("LPN", "RN")) %>%
filter (year %in% c("2020", "2021", "Pending")) %>%
#filter (!(standard_app_type %in% c("Reinstatement", "Renewal", "Exam-retest"))) %>%
group_by (lic_type, standard_app_type, year) %>%
summarize (count = sum(count),
across(c(count_over30days, count_over60days, count_over90days, count_over120days, count_over180days, count_over1year), ~(sum(.x))/sum(count)))
rbind (compare_count2, compare_pct2) %>%
filter (year %in% c("2021", "Pending") & standard_app_type %in% c("Exam", "Endorsement")) %>%
print(n=1e3)
state_averages %>%
filter (lic_type %in% c("LPN", "RN")) %>%
filter (year == "2021") %>%
filter (standard_app_type %in% c("Exam", "Endorsement")) %>%
ungroup() %>%
distinct (data_state)
#rerun standardization code to include ALL licensed and pending if state included others after Sept. 23
endorsement21 <- valid_data %>%
mutate (standard_app_type = case_when(
str_detect(app_type, "Reinstatement") ~ "Reinstatement",
str_detect(app_type, "Renewal") ~ "Renewal",
str_detect(lic_type, "Provisional") ~ "Temporary",
str_detect(lic_type, "Temp") ~ "Temporary",
lic_type=="Volunteer RN" ~ "Temporary", #for 22 records in PA
str_detect(app_type, "Endorsement") ~ "Endorsement",
str_detect(app_type, "Exam-retest") ~ "Exam-retest",
str_detect(app_type, "Exam") ~ "Exam",
app_type %in% c("Foreign Applicant", "Inactive", "SSL to MSL", "International") ~ "Other",
TRUE ~ app_type)) %>%
mutate (year = if_else (str_detect(year, "^Pending"), "Pending", year)) %>%
filter (year %in% c("2021", "Pending") & standard_app_type %in% c("Exam", "Endorsement")) %>%
count (standard_app_type, year)
#How many total endorsement licenses were issued and applied for in 2021 from these records?
sum(endorsement21[endorsement21$standard_app_type=="Endorsement", "n"])
#146,886 nurses --
