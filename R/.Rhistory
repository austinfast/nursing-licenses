names_to = "type",
values_to = "state_min")
max <- state_averages %>%
filter (year=="2021" & standard_app_type %in% c("Exam", "Endorsement")) %>%
mutate (mean = as.integer(mean),
median= as.integer(median)) %>%
group_by (lic_type, standard_app_type) %>%
arrange (lic_type, standard_app_type) %>%
summarize (across(3:17, ~max(.x))) %>%
pivot_longer (cols = c("mean", "median", "count",
#"count_over30days", "pct_over30days",
#"count_over60days", "pct_over60days", "count_over90days", "pct_over90days",
#"count_over120days", "pct_over120days", "count_over180days", "pct_over180days",
#"count_over1year", "pct_over1year"
),  #, "count_2020", "count_2021", "change_med"
names_to = "type",
values_to = "state_max")
exam_end4 <- exam_end3 %>%
full_join (natl_averages3, by = c("lic_type", "standard_app_type", "type")) %>%
full_join (min, by = c("lic_type", "standard_app_type", "type")) %>%
full_join (max, by = c("lic_type", "standard_app_type", "type")) %>%
select (1:3, natl_look, state_min, state_max, 4:33)
View(exam_end4)
min_lic_type <- state_avg_lic_type_only %>%
filter (year=="2021") %>%
mutate (mean = as.integer(mean),
median= as.integer(median)) %>%
group_by (lic_type) %>%
summarize (across(3:17, ~min(.x))) %>%
pivot_longer (cols = c("mean", "median", "count",
#"count_over30days", "pct_over30days",
#"count_over60days", "pct_over60days", "count_over90days", "pct_over90days",
#"count_over120days", "pct_over120days", "count_over180days", "pct_over180days",
#"count_over1year", "pct_over1year"
),  #, "count_2020", "count_2021", "change_med"
names_to = "type",
values_to = "state_min")
max_lic_type <- state_avg_lic_type_only %>%
filter (year=="2021") %>%
mutate (mean = as.integer(mean),
median= as.integer(median)) %>%
group_by (lic_type) %>%
summarize (across(3:17, ~max(.x))) %>%
pivot_longer (cols = c("mean", "median", "count",
#"count_over30days", "pct_over30days",
#"count_over60days", "pct_over60days", "count_over90days", "pct_over90days",
#"count_over120days", "pct_over120days", "count_over180days", "pct_over180days",
#"count_over1year", "pct_over1year"
),  #, "count_2020", "count_2021", "change_med"
names_to = "type",
values_to = "state_max")
natl_averages4 <- natl_avg_lic_type %>%
filter (year=="2021" & lic_type %in% c("LPN", "RN")) %>%
mutate (mean = as.integer(mean),
median= as.integer(median)) %>%
pivot_longer (cols = c("mean", "median", "count",
#"count_over30days", "pct_over30days",
#"count_over60days", "pct_over60days", "count_over90days", "pct_over90days",
#"count_over120days", "pct_over120days", "count_over180days", "pct_over180days",
#"count_over1year", "pct_over1year"
),  #, "count_2020", "count_2021", "change_med"
names_to = "type",
values_to = "natl_look") #%>%
#select (-year)
exam_end_lic_only2 <- exam_end_lic_only %>%
full_join (natl_averages4, by = c("lic_type", "type")) %>%
full_join (min_lic_type, by = c("lic_type", "type")) %>%
full_join (max_lic_type, by = c("lic_type", "type")) %>%
mutate (standard_app_type = "All new licenses") %>%
select (1:2, standard_app_type, natl_look, state_min, state_max, 3:33)
# ^^ for News Apps
#Converting back to usable format for data analysis
exam_end_lic_only3 <- exam_end_lic_only2 %>%
pivot_longer (cols = 4:37,
names_to = "data_state",
values_to = "measure") %>%
pivot_wider (id_cols = 2:4,
names_from = type,
values_from = measure) %>%
mutate (data_state = case_when (
data_state == "natl_look" ~ "1-National total",
data_state == "state_min" ~ "2-National min",
data_state == "state_max" ~ "2-National max",
TRUE ~ data_state)) %>%
arrange (data_state, lic_type)
write_csv (exam_end_lic_only3, "../output/2021_state_summary_by_lic_type.csv")
View(exam_end_lic_only2)
for_connie <- rbind (exam_end_lic_only2, exam_end4)
View(for_connie)
View(exam_end_lic_only2)
exam_end_lic_only2 <- exam_end_lic_only %>%
full_join (natl_averages4, by = c("lic_type", "type")) %>%
full_join (min_lic_type, by = c("lic_type", "type")) %>%
full_join (max_lic_type, by = c("lic_type", "type")) %>%
mutate (standard_app_type = "All new licenses") %>%
select (1:2, standard_app_type, natl_look, state_min, state_max, 3:34)
for_connie <- rbind (exam_end_lic_only2, exam_end4)
View(for_connie)
View(exam_end_lic_only3)
View(exam_end_combined2)
View(exam_end_combined2)
min_lic_type2 <- state_averages_combined %>%
filter (year=="2021") %>%
mutate (mean = as.integer(mean),
median= as.integer(median)) %>%
group_by (lic_type) %>%
summarize (across(3:18, ~min(.x))) %>%
add_column(data_state="state_min") %>%
select (-year)
max_lic_type2 <- state_averages_combined %>%
filter (year=="2021") %>%
mutate (mean = as.integer(mean),
median= as.integer(median)) %>%
group_by (lic_type) %>%
summarize (across(3:18, ~max(.x))) %>%
add_column (data_state="state_max") %>%
select (-year)
natl_averages5 <- natl_averages_combined %>%
filter (year=="2021") %>%
mutate (mean = as.integer(mean),
median= as.integer(median)) %>%
add_column(data_state="natl_look") %>%
select (-year)
exam_end_combined2 <- exam_end_combined %>%
rbind (natl_averages5, min_lic_type2, max_lic_type2) %>%
arrange (data_state) %>%
mutate (standard_app_type = "All new licenses (Endorsement, exam, other, unknown)",
lic_type = "LPN+RN")  #%>%
View(exam_end_combined2)
exam_end_combined2 <- exam_end_combined %>%
rbind (natl_averages5, min_lic_type2, max_lic_type2) %>%
arrange (data_state) %>%
mutate (standard_app_type = "All new licenses (Endorsement, exam, other, unknown)",
lic_type = "LPN+RN")  %>%
pivot_longer (cols = c("mean", "median", "count"),
names_to = "type",
values_to = "value")
exam_end_combined2 <- exam_end_combined %>%
rbind (natl_averages5, min_lic_type2, max_lic_type2) %>%
arrange (data_state) %>%
mutate (standard_app_type = "All new licenses (Endorsement, exam, other, unknown)",
lic_type = "LPN+RN")  #%>%
select (1:6) %>%
pivot_longer (cols = c("mean", "median", "count"),
names_to = "type",
values_to = "value")
exam_end_combined2 <- exam_end_combined %>%
rbind (natl_averages5, min_lic_type2, max_lic_type2) %>%
arrange (data_state) %>%
mutate (standard_app_type = "All new licenses (Endorsement, exam, other, unknown)",
lic_type = "LPN+RN")  %>%
select (1:6) %>%
pivot_longer (cols = c("mean", "median", "count"),
names_to = "type",
values_to = "value")
exam_end_combined2 <- exam_end_combined %>%
rbind (natl_averages5, min_lic_type2, max_lic_type2) %>%
arrange (data_state) %>%
mutate (standard_app_type = "All new licenses (Endorsement, exam, other, unknown)",
lic_type = "LPN+RN")  %>%
select (1:6) %>%
pivot_longer (cols = c("mean", "median", "count"),
names_to = "type",
values_to = "value") %>%
pivot_wider (id_cols = c(lic_type, standard_app_type),
names_from = "type",
values_from = "value")
exam_end_combined2 <- exam_end_combined %>%
rbind (natl_averages5, min_lic_type2, max_lic_type2) %>%
arrange (data_state) %>%
mutate (standard_app_type = "All new licenses (Endorsement, exam, other, unknown)",
lic_type = "LPN+RN")  %>%
select (1:6) %>%
pivot_longer (cols = c("mean", "median", "count"),
names_to = "type",
values_to = "value") %>%
pivot_wider (id_cols = c("lic_type", "standard_app_type"),
names_from = "data_state",
values_from = "value")
exam_end_combined2 <- exam_end_combined %>%
rbind (natl_averages5, min_lic_type2, max_lic_type2) %>%
arrange (data_state) %>%
mutate (standard_app_type = "All new licenses (Endorsement, exam, other, unknown)",
lic_type = "LPN+RN")  %>%
select (1:6) %>%
pivot_longer (cols = c("mean", "median", "count"),
names_to = "type",
values_to = "value") #%>%
pivot_wider (id_cols = c("type","lic_type", "standard_app_type"),
names_from = "data_state",
values_from = "value")
exam_end_combined2 <- exam_end_combined %>%
rbind (natl_averages5, min_lic_type2, max_lic_type2) %>%
arrange (data_state) %>%
mutate (standard_app_type = "All new licenses (Endorsement, exam, other, unknown)",
lic_type = "LPN+RN")  %>%
select (1:6) %>%
pivot_longer (cols = c("mean", "median", "count"),
names_to = "type",
values_to = "value") %>%
pivot_wider (id_cols = c("type","lic_type", "standard_app_type"),
names_from = "data_state",
values_from = "value")
View(for_connie)
exam_end_combined2 <- exam_end_combined %>%
rbind (natl_averages5, min_lic_type2, max_lic_type2) %>%
arrange (data_state) %>%
mutate (standard_app_type = "All new licenses (Endorsement, exam, other, unknown)",
lic_type = "LPN+RN")  %>%
select (1:6) %>%
pivot_longer (cols = c("mean", "median", "count"),
names_to = "type",
values_to = "value") %>%
pivot_wider (id_cols = c("type","lic_type", "standard_app_type"),
names_from = "data_state",
values_from = "value") %>%
select (1:3, natl_look, state_min, state_max, 4:19, 21:30, 33:38)
for_connie <- rbind (exam_end_combined2, exam_end_lic_only2, exam_end4)
for_connie <- rbind (exam_end_combined2, exam_end_lic_only2, exam_end4) %>%
arrange (lic_type, app_type)
for_connie <- rbind (exam_end_combined2, exam_end_lic_only2, exam_end4) %>%
arrange (lic_type, standard_app_type) %>%
rename (app_type = standard_app_type)
exam_end_combined2 <- exam_end_combined %>%
rbind (natl_averages5, min_lic_type2, max_lic_type2) %>%
arrange (data_state) %>%
mutate (standard_app_type = "All new licenses (Endorsement, exam, other, unknown)",
lic_type = "All (LPN+RN)")  %>%
select (1:6) %>%
pivot_longer (cols = c("mean", "median", "count"),
names_to = "type",
values_to = "value") %>%
pivot_wider (id_cols = c("type","lic_type", "standard_app_type"),
names_from = "data_state",
values_from = "value") %>%
select (1:3, natl_look, state_min, state_max, 4:19, 21:30, 33:38)
for_connie <- rbind (exam_end_combined2, exam_end_lic_only2, exam_end4) %>%
arrange (lic_type, standard_app_type) %>%
rename (app_type = standard_app_type)
write_csv (for_connie, "../output/2021_state_summary.csv")
for_connie2 <- for_connie %>%
pivot_longer (cols = 4:38,
names_to = "state",
values_to = "value")
View(for_connie2)
View(for_connie2)
for_connie2 <- for_connie %>%
pivot_longer (cols = 4:38,
names_to = "state",
values_to = "value") %>%
pivot_wider (id_cols = c("lic_type", "app_type", "state"),
values_from = "value",
names_from = "type")
View(for_connie2)
for_connie2 <- for_connie %>%
pivot_longer (cols = 4:38,
names_to = "state",
values_to = "value") %>%
pivot_wider (id_cols = c("lic_type", "app_type", "state"),
values_from = "value",
names_from = "type")
write_csv (for_connie2, "../output/2021_state_summary_tidy.csv")
weeks_to_license <- valid_data3 %>%
# group_by (year, data_state, lic_type, standard_app_type) %>%
#  mutate (median21 = median (process_time2)) %>%
mutate (#week_count = round(as.numeric(process_time2/7)), #will round down if below 0.5
week_count = ceiling(as.numeric(process_time2/7))) %>% #always round up
#  rename (week_count = process_time2) %>%
filter (year=="2021") %>%
count (data_state, lic_type, standard_app_type, week_count) #, median21
#  rename (licensee_count = n)
#Check that week_count captures weeks accurately
valid_data3 %>%
mutate (week_count = ceiling(as.numeric(process_time2/7))) %>%
group_by (week_count) %>%
summarize (min (process_time2),
max(process_time2))
valid_data4 <- valid_data3 %>%
filter (year == "2021") %>%
group_by (year, data_state, lic_type, standard_app_type) %>%
summarize (median21 = median (process_time2),
count = n()) %>%
group_by (year, data_state, lic_type, standard_app_type) %>%
mutate (pct = count / sum(count) * 100,
#med_weeks = ceiling (as.numeric(median21/7))
med_weeks = (as.numeric(median21/7)))
#EXPORT FOR NPR graphics team ========================= |
connie_histographs <- weeks_to_license %>%
rename (licensee_count = n) %>%
pivot_wider (id_cols = c(lic_type, standard_app_type, week_count),
names_from = data_state,
values_from = licensee_count)
#write_csv (connie_histographs, "Nurse licenses-weeks to licensure.csv")
#write_csv (weeks_to_license, "Nurse licenses-weeks to licensure-tidy.csv")
#write_csv (valid_data4, "Nurse licenses-weeks to licensure-state medians.csv")
#Separating for Connie into CA, PA, TX
pa_weeks_to_license <- weeks_to_license %>%
rename (licensee_count = n) %>%
filter (data_state == "PA" & standard_app_type %in% c("Exam", "Endorsement")) #%>%
#  pivot_wider (id_cols = week_count,
#               names_from = c(lic_type, standard_app_type),
#               values_from = licensee_count) %>%
#  arrange (week_count) %>%
#  mutate (across(2:5, ~replace_na(.x, 0)))
#write_csv (tx, "Nurse licenses-weeks to licensure-TX.csv")
pa_weeks_to_license2 <- valid_data3 %>% #FOR JAN-SEPT
ungroup() %>%
filter (data_state=="PA" & year == "2021") %>%
group_by (year, data_state, lic_type, standard_app_type) %>%
summarize (mean21 = mean (process_time2),
median21 = median (process_time2),
count = n()) %>%
group_by (year, data_state, lic_type, standard_app_type) %>%
mutate (med_weeks =  ceiling(as.numeric(median21/7)),#ceiling
mean_weeks =  ceiling(as.numeric(mean21/7))) %>% #ceiling
filter (lic_type %in% c("RN", "LPN"))
#write_csv (pa_weeks_to_license2, "pa_averages_220307.csv")
pa_graph <- pa_weeks_to_license %>%
#filter (data_state==state) %>%
#filter (lic_type %in% c("RN")) %>% #"LPN",
filter (standard_app_type %in% c("Exam", "Endorsement")) %>%
arrange (standard_app_type, week_count) %>%
#  filter (standard_app_type == "Exam") %>%
# filter (!(standard_app_type %in% c("Reinstatement", "Renewal", "Exam-retest"))) %>%
ggplot(aes(x = week_count, y = licensee_count, group=lic_type, fill=standard_app_type)) +
geom_bar(stat='identity', position='stack') +
facet_wrap (~ lic_type, ncol=1, scales='free',
labeller = label_wrap_gen(multi_line=FALSE)) +
# scale_x_continuous(breaks=c(0,30, 60, 90, 120)) +
scale_x_continuous(
breaks=seq(0, 52, by = 4), #(365 / 7 / 12))
#                   labels=as.character(seq(0, 12, by = 1)),
limits=c(-0.5, 52)) +
#Add padding so they appear equal width
scale_y_continuous(breaks=seq(0,850, by = 200),#900 Jan-sept #1500 fullyear
limits=c(0,850)
#labels = function(x) stringr::str_pad(x, width = 4, pad = "0")
) +
#Add median lines
geom_vline(data = (pa_weeks_to_license2 %>% filter (lic_type=="RN" & standard_app_type %in% c("Exam", "Endorsement"))), mapping = aes(xintercept = med_weeks)) +
# geom_vline(data = (ca_weeks_to_license5 %>% filter (lic_type=="RN" & standard_app_type %in% c("Exam", "Endorsement"))), mapping = aes(xintercept = mean_weeks), color="steelblue", linetype="twodash") +
# geom_vline (xintercept = 90, linetype = "dashed", colour = "black") +
labs(x="Weeks from application to licensure",
y="Count of licensees",
title=paste("New registered nurse licenses issued in PA in 2021"),
fill = "Application Type",
#subtitle="Weeks from application submission to license issuance",
caption="Source: Pennsylvania State Board of Nursing\nVertical lines represent that group's median processing time.") +#\nIncludes licenses issued Jan. 1 to Sept. 23, 2021.") +
theme(axis.text.x = element_text(angle=60, hjust=1)) +
theme(legend.position = "right")
print(pa_graph)
pa_weeks_to_license %>%
filter (week_count > 48) %>%
#  group_by (lic_type, standard_app_type) %>%
group_by (lic_type) %>%
summarize (total = sum(licensee_count)) %>%
adorn_totals()
#Save states to list
states=(ls() %>% as.data.frame() %>% filter (str_detect(., "_state$")) %>% pull() %>% str_remove_all("_state") %>% str_to_upper())
#states <- str_to_upper(c("ar", "co", "hi", "ia", "il", "in", "ky", "ma", "me", "mi", "mn", "ms", "mt", "ne", "nh", "nj", "nm", "oh", "ok", "or", "pa", "sc", "tx", "vt", "LA", "WY", "WV", "CT", "VA", "NC", "CA", "TN"))
for (i in states){
state <- i
#CT/VA don't separate by exam/endorsement, so change here
if (state %in% c("CT", "VA")){
rn_med <- valid_data4 %>%
filter (data_state==state & lic_type=="RN" & standard_app_type=="Unknown") %>%
mutate (median21 = as.numeric(median21) / 7) %>%
pull (median21)
lpn_med <- valid_data4 %>%
filter (data_state==state & lic_type=="LPN" & standard_app_type=="Unknown") %>%
mutate (median21 = as.numeric(median21) / 7) %>%
pull (median21)
#Make RN graph
rn_graph <- weeks_to_license %>%
filter (data_state==state) %>%
filter (lic_type %in% c("RN")) %>% #"LPN",
#mutate (standard_app_type = "Exam & Endorsement") %>%
ggplot(aes(x = week_count, y = n, group=lic_type, fill=lic_type)) +
geom_bar(stat='identity')  +
facet_wrap (~ standard_app_type, ncol=1) +
scale_x_continuous(#breaks=seq(0, 53, by = 4.285714),
breaks=seq(0, 52, by = 4),
#labels=as.character(seq(0, 12, by = 1)),
limits=c(-1, 53)) +
#Add padding so they appear equal width
scale_y_continuous(labels = function(x) stringr::str_pad(x, width = 4, pad = "0")) +
#Add RN median
geom_vline(data = subset(weeks_to_license, standard_app_type == "Unknown"), aes(xintercept = rn_med)) +
labs(x="Weeks from application to licensure",
y="Count of applicants",
title=paste(state, "registered nurse licenses issued in 2021"),
fill = "Type",
#subtitle="Weeks from application submission to license issuance",
caption="Source: State board of nursing") +
theme(axis.text.x = element_text(angle=60, hjust=1)) +
theme(legend.position = "none")
print(rn_graph)
#SAVE TO FILE WITH THIS CODE
#ggsave(plot = rn_graph,
#       file = paste0("/Users/austinfast/Documents/NPR/210908-nursing licenses/Graphs/", state, "-RN.png"),
#width = 6,
#height = 3
#       )
lpn_graph <- weeks_to_license %>%
filter (data_state==state) %>%
filter (lic_type %in% c("LPN")) %>% #"LPN",
#mutate (standard_app_type = "Exam & Endorsement") %>%
#  filter (standard_app_type == "Exam") %>%
# filter (!(standard_app_type %in% c("Reinstatement", "Renewal", "Exam-retest"))) %>%
ggplot(aes(x = week_count, y = n, group=lic_type, fill=lic_type)) +
geom_bar(stat='identity', color = "skyblue", fill ="skyblue")  +
facet_wrap (~ standard_app_type, ncol=1) +
scale_x_continuous(#breaks=seq(0, 53, by = 4.285714),
breaks=seq(0, 52, by = 4),
#labels=as.character(seq(0, 12, by = 1)),
limits=c(-1, 53)) +
#Add padding so they appear equal width
scale_y_continuous(labels = function(x) stringr::str_pad(x, width = 4, pad = "0")) +
#ADD ALL MEDIANS TO ALL FACETS HERE
geom_vline(data = subset(weeks_to_license, standard_app_type == "Unknown"), aes(xintercept = lpn_med)) +
# geom_vline (xintercept = 90, linetype = "dashed", colour = "black") +
labs(x="Weeks from application to licensure",
y="Count of applicants",
title=paste(state, "practical nurse licenses issued in 2021"),
fill = "Type",
#subtitle="Weeks from application submission to license issuance",
caption="Source: State board of nursing") +
theme(axis.text.x = element_text(angle=60, hjust=1)) +
theme(legend.position = "none")
print (lpn_graph)
#SAVE TO FILE WITH THIS CODE
#ggsave(plot = lpn_graph,
#       file = paste0("/Users/austinfast/Documents/NPR/210908-nursing licenses/Graphs/", state, "-LPN.png")
#       )
} else {
#Lousiana only has LPNs, so skip RN graph
if(state=="LA"){
}else{
rn_graph <- weeks_to_license %>%
filter (data_state==state) %>%
filter (lic_type %in% c("RN")) %>% #"LPN",
filter (standard_app_type %in% c("Exam", "Endorsement")) %>%
#  filter (standard_app_type == "Exam") %>%
# filter (!(standard_app_type %in% c("Reinstatement", "Renewal", "Exam-retest"))) %>%
ggplot(aes(x = week_count, y = n, group=lic_type, fill=lic_type)) +
geom_bar(stat='identity')  +
facet_wrap (~ standard_app_type, ncol=1) +
scale_x_continuous(#breaks=seq(0, 53, by = 4.285714),
breaks=seq(0, 52, by = 4),
#labels=as.character(seq(0, 12, by = 1)),
limits=c(-1, 53)) + #140 to reach max
#Add padding so they appear equal width
scale_y_continuous(labels = function(x) stringr::str_pad(x, width = 4, pad = "0"),
#limits=c(0, 800)
) +
#ADD ALL MEDIANS TO ALL FACETS HERE
geom_vline(data = (valid_data4 %>% filter (data_state == state & lic_type=="RN" & standard_app_type %in% c("Exam", "Endorsement"))), mapping = aes(xintercept = med_weeks)) +
labs(x="Weeks from application to licensure",
y="Count of applicants",
title=paste(state, "registered nurse licenses issued in 2021"),
fill = "Type",
#subtitle="Weeks from application submission to license issuance",
caption="Source: State board of nursing") +
theme(axis.text.x = element_text(angle=60, hjust=1)) +
theme(legend.position = "none")
print(rn_graph)
#SAVE TO FILE WITH THIS CODE
#ggsave(plot = rn_graph,
#       file = paste0("/Users/austinfast/Documents/NPR/210908-nursing licenses/Graphs/", state, "-RN.png"),
#width = 6,
#height = 3
#       )
}
#WY/WV only have RNs, so skip RN graph
if (state %in% c("WY", "WV")){
}else{
lpn_graph <- weeks_to_license %>%
filter (data_state==state) %>%
filter (lic_type %in% c("LPN")) %>% #"LPN",
filter (standard_app_type %in% c("Exam", "Endorsement")) %>%
#  filter (standard_app_type == "Exam") %>%
# filter (!(standard_app_type %in% c("Reinstatement", "Renewal", "Exam-retest"))) %>%
ggplot(aes(x = week_count, y = n, group=lic_type, fill=lic_type)) +
geom_bar(stat='identity', color = "skyblue", fill ="skyblue")  +
facet_wrap (~ standard_app_type, ncol=1) +
scale_x_continuous(#breaks=seq(0, 53, by = 4.285714),
breaks=seq(0, 52, by = 4),
#labels=as.character(seq(0, 12, by = 1)),
limits=c(-1, 53)) +
#Add padding so they appear equal width
scale_y_continuous(labels = function(x) stringr::str_pad(x, width = 4, pad = "0")) +
#ADD ALL MEDIANS TO ALL FACETS HERE
geom_vline(data = (valid_data4 %>% filter (data_state == state & lic_type=="LPN" & standard_app_type %in% c("Exam", "Endorsement"))), mapping = aes(xintercept = med_weeks)) +
# geom_vline (xintercept = 90, linetype = "dashed", colour = "black") +
labs(x="Weeks from application to licensure",
y="Count of applicants",
title=paste(state, "practical nurse licenses issued in 2021"),
fill = "Type",
#subtitle="Weeks from application submission to license issuance",
caption="Source: State board of nursing") +
theme(axis.text.x = element_text(angle=60, hjust=1)) +
theme(legend.position = "none")
print (lpn_graph)
#SAVE TO FILE WITH THIS CODE
#ggsave(plot = lpn_graph,
#       file = paste0("/Users/austinfast/Documents/NPR/210908-nursing licenses/Graphs/", state, "-LPN.png"),
#width = 6,
#height = 3
#       )
}
}
}
